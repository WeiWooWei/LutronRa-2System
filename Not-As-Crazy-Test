/**
 *  Lutron Gateway
 *
 *  Copyright 2015 Bruce Ravenel
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Lutron Gateway - Not so CrazyTest",
    namespace: "WeiWooWei",
    author: "Bruce Ravenel with meddling by Tim and Fred",
    description: "Create virtual devices for each Lutron device and control Lutron with them",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")

preferences {
	page(name: "selectLutron")
}

def getCmd(myCmd, n) {
	def result = input myCmd, "text", title: "Lutron Command #$n", required: true
}

 def getName(myName, n) {
	def result = input myName, "text", title: "Device Name #$n", required: true
}
def getS2Cmd(myS2Cmd, n) {
	def result = input myS2Cmd, "text", title: "Lutron Command #$n", required: true
}

 def getS2Name(myS2Name, n) {
	def result = input myS2Name, "text", title: "Device Name #$n", required: true
}
def selectLutron() {
	dynamicPage(name: "selectLutron", title: "Lutron Gateway and Devices", uninstall: true, install: true) {
		section("") {
			input "Lutron", "capability.relaySwitch", title: "Lutron gateway", required: true, multiple: false
			input "Remove", "capability.momentary", title: "Remove button", required: true, multiple: false
			input "howMany", "number", title: "How many Lutron devices in System 1?", required: true, submitOnChange: true
            input "howManyS2", "number", title: "How many Lutron devices in System 2?", required: true, submitOnChange: true
		}
		section("Select Lutron Devices System 1") {
			for (int i = 0; i < howMany; i++) {
				def thisCmd = "dCmd$i"
				def thisName = "dName$i"
				getCmd(thisCmd, i + 1)
				getName(thisName, i + 1)
                		paragraph(" ")
        }
        }
        section("Select Lutron Devices System 2") {
			for (int S2i = 0; S2i < howManyS2; S2i++) {
				def thisS2Cmd = "dS2Cmd$S2i"
				def thisS2Name = "dS2Name$S2i"
				getS2Cmd(thisS2Cmd, S2i + 1)
				getS2Name(thisS2Name, S2i + 1)
                		paragraph(" ")
		
			}
            }
		}
	}

def installed() {
	initialize()
}

def updated() {
	unsubscribe()
	initialize()
}

def initialize() {
	state.myDevices = [:]
 	state.sysId = [:]					//Defining sysId map
	if (howmanyS2 > 0) {
    for (int i = 0 ; i < howManyS2; i++) {
        def thisS2Cmd = settings.find {it.key == "dS2Cmd$i"}
        log.debug "line 90 thisS2Cmd is $thisS2Cmd"
        def thisS2Name = settings.find {it.key == "dS2Name$i"}
        log.debug "line 92"
        def devS2Id = thisS2Name.value				//Assigning thisName.value to devId	
        log.debug "line 94"
        if (thisS2Cmd != "") {def thisSystem = S2}
        def sysNum = "S2"				//Assigning S2 to string sysNum
        state.sysId << [ devS2Id:sysNum ]				//Populating sysId map
    	def deviceId = "Lutron" + "$i-S2-" + app.id
        def myS2Device = getChildDevice(deviceId)
       	if(!myS2Device) def childDevice = addChildDevice("smartthings", thisS2Cmd.value[1] in ['d', 'D'] ? "Virtual Dimmer" : "On/Off Button Tile", deviceId, null, [label: thisS2Name.value])
        	myS2Device = getChildDevice(deviceId)
        	myS2Device.name = thisS2Cmd.value
        if(myS2Device.name[0] in ['s', 'S']) {        //  SSI or SDL, build map based on Lutron zone #
        	def iloc = myS2Device.name.indexOf(',') + 1
			def ndx = myS2Device.name.substring(iloc).toInteger()
			state.myDevices << ["$ndx":deviceId]
        }
        if(myS2Device.name[1] in ['d', 'D']) {		//  SDL, dimmer
        	subscribe(myS2Device, "level", dimmerHandler)
		subscribe(myS2Device, "switch", dimOnOffHandler)
        } else subscribe(myS2Device, "switch", switchHandler)
    }
    subscribe(Lutron, "msgRcvd", LutronHandler)
    subscribe(Remove, "switch.on", removeHandler)
    state.zmp2 = ",XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    }
    else for (int i = 0 ; i < howMany; i++) {
        def thisCmd = settings.find {it.key == "dCmd$i"}
        def thisName = settings.find {it.key == "dName$i"}
        def devId = thisName.value				//Assigning thisName.value to devId	
        def sysNum = "S1"         				//Assigning S1 to string sysNum
        state.sysId << [ devId:sysNum ]				//Populating sysId map
    	def deviceId = "Lutron" + "$i-" + app.id
        def myDevice = getChildDevice(deviceId)
        if (!myDevice) def childDevice = addChildDevice("smartthings", thisCmd.value[1] in ['d', 'D'] ? "Virtual Dimmer" : "On/Off Button Tile", deviceId, null, [label: thisName.value])
        	myDevice = getChildDevice(deviceId)
        	myDevice.name = thisCmd.value
        //def theSystem = thisSystem.value //I don't think you need this  You probably can just use thisSystem.value but it made me feel less anxious to have it here.
        if(myDevice.name[0] in ['s', 'S']) {        //  SSI or SDL, build map based on Lutron zone #
        	def iloc = myDevice.name.indexOf(',') + 1
			def ndx = myDevice.name.substring(iloc).toInteger()
			state.myDevices << ["$ndx":deviceId]
        }
        if(myDevice.name[1] in ['d', 'D']) {		//  SDL, dimmer
        	subscribe(myDevice, "level", dimmerHandler)
			subscribe(myDevice, "switch", dimOnOffHandler)
        } 
        else subscribe(myDevice, "switch", switchHandler)
    	subscribe(Lutron, "msgRcvd", LutronHandler)
    	subscribe(Remove, "switch.on", removeHandler)
    	state.zmp = ",XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    }
}
def switchHandler(evt) {
	def myDev = evt.device
    if (state.sysId.myDev == S2 | state.sysId.myDev == s2){
    Lutron.sendMsg("$myDev.name,${evt.value == "on" ? "on" : "off" },S2")	//If so, append 'S2' to the command
    	} else Lutron.sendMsg("$myDev.name,${evt.value == "on" ? "on" : "off" }")	//If not, run the original command
}

def dimmerHandler(evt) {
	def myDev = evt.device
    if (state.sysId.myDev == S2 | state.sysId.myDev == s2){
	Lutron.sendMsg("$myDev.name,$evt.value,S2")			//If so, append 'S2' to the command
       } else Lutron.sendMsg("$myDev.name,$evt.value")			//If not, run the original command
 }

def dimOnOffHandler(evt) {
	def myDev = evt.device
    def level = myDev.currentLevel ?: 100
    if (state.sysId.myDev == S2 | state.sysId.myDev == s2){
	Lutron.sendMsg("$myDev.name,${evt.value == "on" ? "$level" : "0" },S2")		//If so, append 'S2' to the command
	} else Lutron.sendMsg("$myDev.name,${evt.value == "on" ? "$level" : "0" }")	//If not, run the original command
 }
log.debug "made it to line 165"
def LutronHandler(evt) {
	if (evt.value.startsWith("LZC") && !evt.value.endsWith("CHG")) {  // process on/off of zone
		def ndx = evt.value.substring(evt.value[4] == "0" ? 5 : 4, 6)
         log.debug "this is ndx $ndx"
		def device = getChildDevice(state.myDevices["$ndx"])
        	device.sendEvent(name: "switch", value: evt.value.endsWith("ON ") ? "on" : "off")
	} else if (evt.value.startsWith("ZMP") && !evt.value.endsWith("S2")) {			  // process zmp report to tie BP to zones
	    log.debug "We're inside of the S1 ZMP message handler"
		//def zmp = evt.value.substring(3)
      //         for (int i = 1; i <= 32; i++) if(state.zmp[i] != zmp[i]) { // state changed
			//def device = getChildDevice(state.myDevices["$i"])
			//device.sendEvent(name: "switch", value: zmp[i] == "1" ? "on" : "off")
		//}
    		//state.zmp = zmp
	 } else if (evt.value.startsWith("ZMP") && evt.value.endsWith("S2")) {			  // process zmp report to tie BP to zones
    log.debug "We're inside of the S2 ZMP message handler"
		//def zmp2 = evt.value.substring(3)
    //           for (int i = 1; i <= 32; i++) if(state.zmp2[i] != zmp2[i]) { // state changed
		//	def device = getChildDevice(state.myDevices["$i"])
		//	device.sendEvent(name: "switch", value: zmp[i] == "1" ? "on" : "off")
		//}
    		//state.zmp2 = zmp2
	}
}

def removeHandler(evt) {
	unsubscribe()
}

def uninstalled() {
	removeChildDevices(getChildDevices())
}

private removeChildDevices(delete) {
	delete.each {deleteChildDevice(it.deviceNetworkId)}
}
